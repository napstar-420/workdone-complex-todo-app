"use strict";(self.webpackChunktodo_app=self.webpackChunktodo_app||[]).push([[826,930,242,522,851],{426:(n,r,e)=>{e.d(r,{Z:()=>s});var t=e(537),a=e.n(t),o=e(645),i=e.n(o)()(a());i.push([n.id,":root {\r\n    --main-font: 'Montserrat', sans-serif;\r\n    --secondary-font: 'Open Sans', sans-serif;\r\n    --transition: all ease-in-out 0.3s;\r\n    --main-color: rgb(135, 76, 194);\r\n    --raleway-font: 'Raleway', sans-serif;\r\n    scroll-margin-left: 1rem;\r\n}\r\n\r\n::-webkit-scrollbar {\r\n    width: 5px;\r\n    position: relative;\r\n    left: 5px;\r\n}\r\n::-webkit-scrollbar-track {\r\n    background: #151515;\r\n}\r\n::-webkit-scrollbar-thumb {\r\n    background: var(--main-color); \r\n    border-radius:10px;\r\n  }\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: #555; \r\n  } \r\n\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1rem;\r\n    scroll-behavior: smooth;\r\n}\r\n\r\n/* GLOBAL STYLING */\r\n\r\nbody {\r\n    background-color: #151515;\r\n    max-width: 1500px;\r\n    margin: auto;\r\n}\r\n\r\n.hidden {\r\n    display: none !important;\r\n}\r\n\r\n.model {\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100vw;\r\n    min-height: 100vh;\r\n    background-color: #151515bb;\r\n    display: grid;\r\n    place-items: center;\r\n}\r\n\r\n.btn {\r\n    padding: 0.4rem 1rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 4px;\r\n    border: none;\r\n    background-color: var(--main-color);\r\n    font-family: var(--main-font);\r\n    font-weight: 700;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    transition: var(--transition);\r\n    flex: 1;\r\n}\r\n\r\n.color-medium {\r\n    color: orangered;\r\n}\r\n\r\n.color-low {\r\n    color: rgb(255, 255, 83);\r\n}\r\n\r\n.color-high {\r\n    color: red;\r\n}\r\n\r\n.flex-1 {\r\n    flex: 1;\r\n}\r\n\r\n/* HEADER STYLING */\r\n\r\nheader {\r\n    padding: 0.5rem 1rem;\r\n    height: 4rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: #fff 3px solid;\r\n    background-color: var(--main-color);\r\n    background: linear-gradient(180deg, rgb(135, 76, 194) 0%, rgb(105, 50, 160) 100%);\r\n}\r\n\r\n.header-title {\r\n    font-size: 2rem;\r\n    font-family: var(--main-font);\r\n    color: #fff;\r\n}\r\n\r\n.login-btn, .sign-up-btn {\r\n    display: inline-block;\r\n}\r\n\r\n.login-btn {\r\n    background-color: transparent;\r\n}\r\n\r\n.login-btn:hover {\r\n    background-color: rgb(255, 255, 255, 0.1);\r\n}\r\n\r\n.sign-up-btn {\r\n    background-color: #fff;\r\n    color: var(--main-color);\r\n}\r\n\r\n/* MAIN STYLING */\r\n\r\nmain {\r\n    display: flex;\r\n}\r\n\r\n/* SIDE NAV STYLING */\r\n\r\nnav {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 15rem;\r\n    padding: 1rem;\r\n    height: calc(100vh - 4rem);\r\n    /* margin: 0.5rem; */\r\n    transition: var(--transition);\r\n    position: relative;\r\n}\r\n\r\n.tasks_links_wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.projects-tab-container {\r\n    overflow-y: scroll;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.projectLink-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.project-del-btn {\r\n    color: #fff;\r\n    margin-left: 5px;\r\n    padding: 10px;\r\n    border-radius: 50%;\r\n    display: grid;\r\n    place-items: center;\r\n    cursor: pointer;\r\n    transition: var(--transition);\r\n}\r\n\r\n.project-del-btn > i {\r\n    margin-right: 0;\r\n}\r\n\r\n.project-del-btn:hover {\r\n    background-color: #303030;\r\n    color: rgb(255, 144, 144);\r\n}\r\n\r\n#open-project-model-btn {\r\n    background-color: rgb(255, 255, 83);\r\n    color: #101010;\r\n}\r\n\r\n\r\nnav h2 {\r\n    font-size: 1.5rem;\r\n    color: #fff;\r\n    font-family: var(--main-font);\r\n    margin-bottom: 0.5rem;\r\n}\r\n\r\n.nav_link {\r\n    padding: 0.5rem 1rem;\r\n    margin: 0.1rem 0;\r\n    background-color: rgb(135, 76, 194, 0.15);\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-family: var(--main-font);\r\n    font-weight: 700;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: var(--transition);\r\n    cursor: pointer;\r\n}\r\n\r\n.nav_link span {\r\n    margin-right: 0.4rem;\r\n}\r\n\r\n.nav_link:hover, .nav_link.active {\r\n    background-color: var(--main-color);\r\n}\r\n\r\n#expand_nav {\r\n    display: none;\r\n}\r\n\r\n/* ADD PROJECT MODEL STYLING */\r\n\r\n#add-project-model {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0%;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #101010e5;\r\n    display: grid;\r\n    place-items: center;\r\n    padding: 0 0.2rem;\r\n}\r\n\r\n#add-project-model form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.4rem;\r\n}\r\n\r\n#add-project-model form label {\r\n    font-size: 1.2rem;\r\n    font-weight: 700;\r\n    font-family: var(--main-font);\r\n}\r\n\r\n#add-project-model form span {\r\n    width: 100%;\r\n    display: flex;\r\n    gap: 0.4rem;\r\n}\r\n\r\n.project-name-error-msg {\r\n    color: red;\r\n    font-family: var(--main-font);\r\n    font-size: 0.8rem;\r\n}\r\n\r\n/* TASK CONTAINER STYLING */\r\n\r\n.main-container {\r\n    flex: 1;\r\n    margin: 0 1rem;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: auto auto 1fr;\r\n    height: calc(100vh - 4rem);\r\n}\r\n\r\n.top-container {\r\n    margin: 1rem 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.intro {\r\n    font-family: var(--main-font);\r\n    font-size: 1.5rem;\r\n    color: #fff;\r\n}\r\n\r\n.intro span {\r\n    font-size: inherit;\r\n}\r\n\r\n.sub-greeting {\r\n    color: #505050;\r\n    font-family: var(--main-font);\r\n    font-size: 1.2rem;\r\n    font-weight: 700;\r\n}\r\n\r\n.open-task-model-btn {\r\n    flex: none;\r\n    background-color: rgb(255, 255, 83);\r\n    color: #101010;\r\n}\r\n\r\n.open-task-model-btn span {\r\n    margin-right: 0.3rem;\r\n}\r\n\r\n.open-task-model-btn:hover {\r\n    transform: scale(1.1);\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.open-task-model-btn:active {\r\n    transform: translateY(5px) scale(1.1);\r\n}\r\n\r\n#project-title-wrapper {\r\n    margin: 0  0 1rem 0;\r\n}\r\n\r\n#project-title-wrapper h1 {\r\n    font-size: 2rem;\r\n    color: #fff;\r\n    font-family: var(--secondary-font);\r\n}\r\n\r\n/* ADD TASK MODEL STYLING */\r\n\r\n.add-task-form {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 0.4rem;\r\n    background-color: #101010;\r\n    padding: 1rem 1.5rem;\r\n    border-radius: 4px;\r\n}\r\n\r\n.add-task-form h2 {\r\n    font-size: 1.5rem;\r\n    color: #fff;\r\n    font-family: var(--main-font);\r\n    text-align: center;\r\n}\r\n\r\n.add-task-form span:not(.priority-span, .project-span) {\r\n    grid-column: 1 / 3\r\n}\r\n\r\n.add-task-form > span {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.due-date-span > span {\r\n    display: flex;\r\n    justify-content: stretch;\r\n    gap: 0.4rem;\r\n}\r\n\r\n.label {\r\n    color: #fff;\r\n    font-family: var(--secondary-font);\r\n    font-size: 0.9rem;\r\n    letter-spacing: 1px;\r\n}\r\n\r\n.form-control {\r\n    flex: 1;\r\n    background-color: #303030;\r\n    color: #fff;\r\n    font-family: var(--main-font);\r\n    padding: 0.2rem 0.5rem;\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 4px;\r\n}\r\n\r\n.form-control:focus {\r\n    outline: var(--main-color) solid;\r\n    background-color: #353535;\r\n}\r\n\r\n.add-btn {\r\n    background-color: rgb(0, 255, 128);\r\n    color: #101010;\r\n}\r\n\r\n.cancel-btn {\r\n    background-color: red;\r\n}\r\n\r\n/* TASK STYLING */\r\n\r\n#task-container {\r\n    /* flex: 1; */\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\r\n    gap: 1rem;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.priority-bar {\r\n    position: absolute;\r\n    top: 0%;\r\n    left: 0%;\r\n    width: 100%;\r\n    height: 8px;\r\n    background-color: #101010;\r\n}\r\n\r\n.low {\r\n    background-color: rgb(255, 255, 83);\r\n}\r\n\r\n.medium {\r\n    background-color: rgb(216, 88, 41);\r\n}\r\n\r\n.high {\r\n    background-color: rgb(255, 0, 0);\r\n}\r\n\r\n.task {\r\n    color: #fff;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    background-color: #222;\r\n    padding: 1rem;\r\n    border-radius: 4px;\r\n    height: max-content;\r\n    position: relative;\r\n    overflow: hidden;\r\n    transition: all ease 2s;\r\n}\r\n\r\n.task-completed {\r\n    filter: blur(5px);\r\n    opacity: 0;\r\n}\r\n\r\n.desc, .time {\r\n    grid-column: 1 / 3;\r\n}\r\n\r\n.time-left {\r\n    justify-self: end;\r\n    font-family: var(--raleway-font);\r\n    color: rgb(255, 242, 182);\r\n}\r\n\r\n.title {\r\n    font-size: 1.5rem;\r\n    font-family: var(--main-font);\r\n    color: var(--main-color);\r\n}\r\n\r\n.desc {\r\n    font-family: var(--raleway-font);\r\n    margin-bottom: 0.5rem;\r\n    font-size: 0.8rem;\r\n}\r\n\r\n.time {\r\n    font-family: var(--secondary-font);\r\n    font-weight: 400;\r\n}\r\n\r\n.project, .priority {\r\n    font-family: var(--main-font);\r\n    margin-bottom: 0.5rem;\r\n}\r\n\r\n.task-actions {\r\n    grid-column: 1 / 3;\r\n    display: grid;\r\n    grid-template-columns: auto auto 1fr;\r\n    gap: 0.5rem;\r\n\r\n}\r\n\r\n.edit-task, .delete-task {\r\n    background-color: transparent;\r\n    border: 2px solid #606060;\r\n    color: #404040;\r\n    font-weight: 600;\r\n    transition: var(--transition);\r\n}\r\n\r\n.edit-task:hover {\r\n    background-color: #202020;\r\n    color: rgb(255, 255, 88);\r\n    border-color: rgb(255, 255, 88);\r\n}\r\n\r\n.delete-task:hover {\r\n    background-color: #202020;\r\n    color: rgb(255, 53, 53);\r\n    border-color: rgb(255, 53, 53);\r\n}\r\n\r\n.edit-task:active, .delete-task:active {\r\n    background-color: #101010;\r\n    transition: none;\r\n}\r\n\r\n.complete-task {\r\n    background-color: rgb(0, 255, 128);\r\n    color: #101010;\r\n}\r\n\r\n.complete-task:active {\r\n    background-color: rgb(0, 150, 100);\r\n}\r\n\r\n.edit-icon, .delete-icon, .complete-icon {\r\n    margin-right: 0.3rem;\r\n}\r\n\r\n\r\n.no-task-wrapper {\r\n    color: rgb(122, 122, 122);\r\n    display: grid;\r\n    place-items: center;\r\n}\r\n\r\n.no-task-wrapper h2 {\r\n    font-size: 2rem;\r\n    font-family: var(--main-font);\r\n}\r\n\r\n.no-task-wrapper span {\r\n    color: var(--main-color);\r\n    font-size: inherit;\r\n}\r\n\r\n.default-task-container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n}\r\n\r\n.default-task-container h2 {\r\n    flex: 1;\r\n    font-size: 2.5rem;\r\n    color: #fff;\r\n    font-family: var(--main-font);\r\n}\r\n\r\n.default-task-container span {\r\n    font-size: inherit;\r\n    color: var(--main-color);\r\n}\r\n\r\n.default-task-container img {\r\n    flex: 1;\r\n    max-width: 600px;\r\n}\r\n\r\n@media screen and (max-width: 900px) {\r\n    .default-task-container {\r\n        flex-direction: column-reverse;\r\n        margin: 0 1rem;\r\n    }\r\n\r\n    .default-task-container h2 {\r\n        flex: none;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 786px){\r\n    .header-btn-wrapper {\r\n        display: none;\r\n    }\r\n\r\n    main {\r\n        display: initial;\r\n    }\r\n\r\n    nav {\r\n        position: fixed;\r\n        bottom: 0%;\r\n        flex-direction: column;\r\n        width: 100vw;\r\n        max-height: 100vh;\r\n        height: max-content;\r\n        padding: 0;\r\n        z-index: 10;\r\n        padding: 0.5rem;\r\n        background-color: #202020;\r\n        transition: var(--transition);\r\n    }\r\n\r\n    .tasks_links_wrapper {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: stretch;\r\n        margin-bottom: 0;\r\n        width: 100%;\r\n    }\r\n\r\n    .projects-tab-container {\r\n        margin-top: 0.2rem;\r\n        display: none;\r\n    }\r\n\r\n    .projects-tab-container h2 {\r\n        margin: 0.5rem;\r\n    }\r\n\r\n    #projects-tab {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n        gap: 0.2rem;\r\n        margin-bottom: 1rem;\r\n    }\r\n    \r\n    .nav_link {\r\n        flex: 1;\r\n        padding: 0.5rem 0.1rem;\r\n        margin: 0 0.2rem;\r\n        color: #fff;\r\n        /* flex-direction: column; */\r\n        flex-wrap: wrap;\r\n        font-weight: 400;\r\n    }\r\n\r\n    .nav_link span {\r\n        margin-bottom: 5px;\r\n    }\r\n    \r\n    #expand_nav {\r\n        display: block;\r\n        flex: 0;\r\n        padding: 0.5rem 0.3rem;\r\n    }\r\n    \r\n    #expand_nav span {\r\n        margin: 0;\r\n        margin-top: 0.2rem;\r\n    }\r\n    \r\n    #projects-tab .nav_link {\r\n        line-break: anywhere;\r\n    }\r\n\r\n    #open-project-model-btn {\r\n        font-weight: 700;\r\n    }\r\n\r\n    .main-container {\r\n        margin: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: calc(100vh - 4rem);\r\n    }\r\n\r\n    .top-container {\r\n        margin: 1rem;\r\n    }\r\n\r\n    #task-container {\r\n        /* overflow-x: hidden; */\r\n        padding: 0.5rem;\r\n        padding-bottom: 10rem;\r\n        flex: 1;\r\n    }\r\n\r\n    .default-task-container h2 {\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .task {\r\n        width: calc(100% - 10px);\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n    }\r\n\r\n    .task-actions {\r\n        width: 100%;\r\n    }\r\n\r\n    .edit-task span, .delete-task span{\r\n        display: none;\r\n    }\r\n\r\n    .edit-task i, .delete-task i {\r\n        margin: 0;\r\n    }\r\n\r\n    .no-task-wrapper h2 {\r\n        font-size: 1.5rem;\r\n        position: relative;\r\n        bottom: 4rem;\r\n    }\r\n\r\n    .open-task-model-btn {\r\n        position: fixed;\r\n        bottom: 5rem;\r\n        right: 1rem;\r\n        border-radius: 50%;\r\n        padding: 1.5rem;\r\n        z-index: 5;\r\n    }\r\n    \r\n    .open-task-model-btn .material-icons {\r\n        transform: scale(1.8);\r\n        margin: 0 !important;\r\n    }\r\n\r\n    .open-task-model-btn .content {\r\n        display: none;\r\n    }\r\n\r\n    #add-task-model {\r\n        z-index: 15;\r\n    }\r\n\r\n    #project-title-wrapper {\r\n        margin: 0.5rem 0.5rem 0.5rem 1rem;\r\n    }\r\n\r\n    #project-title-wrapper h1 {\r\n        font-family: var(--main-font);\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 425px){\r\n    .no-task-wrapper h2 {\r\n        width: 80%;\r\n    }\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\r\n    --main-font: 'Montserrat', sans-serif;\r\n    --secondary-font: 'Open Sans', sans-serif;\r\n    --transition: all ease-in-out 0.3s;\r\n    --main-color: rgb(135, 76, 194);\r\n    --raleway-font: 'Raleway', sans-serif;\r\n    scroll-margin-left: 1rem;\r\n}\r\n\r\n::-webkit-scrollbar {\r\n    width: 5px;\r\n    position: relative;\r\n    left: 5px;\r\n}\r\n::-webkit-scrollbar-track {\r\n    background: #151515;\r\n}\r\n::-webkit-scrollbar-thumb {\r\n    background: var(--main-color); \r\n    border-radius:10px;\r\n  }\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: #555; \r\n  } \r\n\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-size: 1rem;\r\n    scroll-behavior: smooth;\r\n}\r\n\r\n/* GLOBAL STYLING */\r\n\r\nbody {\r\n    background-color: #151515;\r\n    max-width: 1500px;\r\n    margin: auto;\r\n}\r\n\r\n.hidden {\r\n    display: none !important;\r\n}\r\n\r\n.model {\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100vw;\r\n    min-height: 100vh;\r\n    background-color: #151515bb;\r\n    display: grid;\r\n    place-items: center;\r\n}\r\n\r\n.btn {\r\n    padding: 0.4rem 1rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 4px;\r\n    border: none;\r\n    background-color: var(--main-color);\r\n    font-family: var(--main-font);\r\n    font-weight: 700;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    transition: var(--transition);\r\n    flex: 1;\r\n}\r\n\r\n.color-medium {\r\n    color: orangered;\r\n}\r\n\r\n.color-low {\r\n    color: rgb(255, 255, 83);\r\n}\r\n\r\n.color-high {\r\n    color: red;\r\n}\r\n\r\n.flex-1 {\r\n    flex: 1;\r\n}\r\n\r\n/* HEADER STYLING */\r\n\r\nheader {\r\n    padding: 0.5rem 1rem;\r\n    height: 4rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: #fff 3px solid;\r\n    background-color: var(--main-color);\r\n    background: linear-gradient(180deg, rgb(135, 76, 194) 0%, rgb(105, 50, 160) 100%);\r\n}\r\n\r\n.header-title {\r\n    font-size: 2rem;\r\n    font-family: var(--main-font);\r\n    color: #fff;\r\n}\r\n\r\n.login-btn, .sign-up-btn {\r\n    display: inline-block;\r\n}\r\n\r\n.login-btn {\r\n    background-color: transparent;\r\n}\r\n\r\n.login-btn:hover {\r\n    background-color: rgb(255, 255, 255, 0.1);\r\n}\r\n\r\n.sign-up-btn {\r\n    background-color: #fff;\r\n    color: var(--main-color);\r\n}\r\n\r\n/* MAIN STYLING */\r\n\r\nmain {\r\n    display: flex;\r\n}\r\n\r\n/* SIDE NAV STYLING */\r\n\r\nnav {\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 15rem;\r\n    padding: 1rem;\r\n    height: calc(100vh - 4rem);\r\n    /* margin: 0.5rem; */\r\n    transition: var(--transition);\r\n    position: relative;\r\n}\r\n\r\n.tasks_links_wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.projects-tab-container {\r\n    overflow-y: scroll;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 1rem;\r\n}\r\n\r\n.projectLink-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.project-del-btn {\r\n    color: #fff;\r\n    margin-left: 5px;\r\n    padding: 10px;\r\n    border-radius: 50%;\r\n    display: grid;\r\n    place-items: center;\r\n    cursor: pointer;\r\n    transition: var(--transition);\r\n}\r\n\r\n.project-del-btn > i {\r\n    margin-right: 0;\r\n}\r\n\r\n.project-del-btn:hover {\r\n    background-color: #303030;\r\n    color: rgb(255, 144, 144);\r\n}\r\n\r\n#open-project-model-btn {\r\n    background-color: rgb(255, 255, 83);\r\n    color: #101010;\r\n}\r\n\r\n\r\nnav h2 {\r\n    font-size: 1.5rem;\r\n    color: #fff;\r\n    font-family: var(--main-font);\r\n    margin-bottom: 0.5rem;\r\n}\r\n\r\n.nav_link {\r\n    padding: 0.5rem 1rem;\r\n    margin: 0.1rem 0;\r\n    background-color: rgb(135, 76, 194, 0.15);\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-family: var(--main-font);\r\n    font-weight: 700;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: var(--transition);\r\n    cursor: pointer;\r\n}\r\n\r\n.nav_link span {\r\n    margin-right: 0.4rem;\r\n}\r\n\r\n.nav_link:hover, .nav_link.active {\r\n    background-color: var(--main-color);\r\n}\r\n\r\n#expand_nav {\r\n    display: none;\r\n}\r\n\r\n/* ADD PROJECT MODEL STYLING */\r\n\r\n#add-project-model {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0%;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: #101010e5;\r\n    display: grid;\r\n    place-items: center;\r\n    padding: 0 0.2rem;\r\n}\r\n\r\n#add-project-model form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.4rem;\r\n}\r\n\r\n#add-project-model form label {\r\n    font-size: 1.2rem;\r\n    font-weight: 700;\r\n    font-family: var(--main-font);\r\n}\r\n\r\n#add-project-model form span {\r\n    width: 100%;\r\n    display: flex;\r\n    gap: 0.4rem;\r\n}\r\n\r\n.project-name-error-msg {\r\n    color: red;\r\n    font-family: var(--main-font);\r\n    font-size: 0.8rem;\r\n}\r\n\r\n/* TASK CONTAINER STYLING */\r\n\r\n.main-container {\r\n    flex: 1;\r\n    margin: 0 1rem;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: auto auto 1fr;\r\n    height: calc(100vh - 4rem);\r\n}\r\n\r\n.top-container {\r\n    margin: 1rem 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.intro {\r\n    font-family: var(--main-font);\r\n    font-size: 1.5rem;\r\n    color: #fff;\r\n}\r\n\r\n.intro span {\r\n    font-size: inherit;\r\n}\r\n\r\n.sub-greeting {\r\n    color: #505050;\r\n    font-family: var(--main-font);\r\n    font-size: 1.2rem;\r\n    font-weight: 700;\r\n}\r\n\r\n.open-task-model-btn {\r\n    flex: none;\r\n    background-color: rgb(255, 255, 83);\r\n    color: #101010;\r\n}\r\n\r\n.open-task-model-btn span {\r\n    margin-right: 0.3rem;\r\n}\r\n\r\n.open-task-model-btn:hover {\r\n    transform: scale(1.1);\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.open-task-model-btn:active {\r\n    transform: translateY(5px) scale(1.1);\r\n}\r\n\r\n#project-title-wrapper {\r\n    margin: 0  0 1rem 0;\r\n}\r\n\r\n#project-title-wrapper h1 {\r\n    font-size: 2rem;\r\n    color: #fff;\r\n    font-family: var(--secondary-font);\r\n}\r\n\r\n/* ADD TASK MODEL STYLING */\r\n\r\n.add-task-form {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 0.4rem;\r\n    background-color: #101010;\r\n    padding: 1rem 1.5rem;\r\n    border-radius: 4px;\r\n}\r\n\r\n.add-task-form h2 {\r\n    font-size: 1.5rem;\r\n    color: #fff;\r\n    font-family: var(--main-font);\r\n    text-align: center;\r\n}\r\n\r\n.add-task-form span:not(.priority-span, .project-span) {\r\n    grid-column: 1 / 3\r\n}\r\n\r\n.add-task-form > span {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.due-date-span > span {\r\n    display: flex;\r\n    justify-content: stretch;\r\n    gap: 0.4rem;\r\n}\r\n\r\n.label {\r\n    color: #fff;\r\n    font-family: var(--secondary-font);\r\n    font-size: 0.9rem;\r\n    letter-spacing: 1px;\r\n}\r\n\r\n.form-control {\r\n    flex: 1;\r\n    background-color: #303030;\r\n    color: #fff;\r\n    font-family: var(--main-font);\r\n    padding: 0.2rem 0.5rem;\r\n    border: none;\r\n    outline: none;\r\n    border-radius: 4px;\r\n}\r\n\r\n.form-control:focus {\r\n    outline: var(--main-color) solid;\r\n    background-color: #353535;\r\n}\r\n\r\n.add-btn {\r\n    background-color: rgb(0, 255, 128);\r\n    color: #101010;\r\n}\r\n\r\n.cancel-btn {\r\n    background-color: red;\r\n}\r\n\r\n/* TASK STYLING */\r\n\r\n#task-container {\r\n    /* flex: 1; */\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\r\n    gap: 1rem;\r\n    overflow-y: scroll;\r\n}\r\n\r\n.priority-bar {\r\n    position: absolute;\r\n    top: 0%;\r\n    left: 0%;\r\n    width: 100%;\r\n    height: 8px;\r\n    background-color: #101010;\r\n}\r\n\r\n.low {\r\n    background-color: rgb(255, 255, 83);\r\n}\r\n\r\n.medium {\r\n    background-color: rgb(216, 88, 41);\r\n}\r\n\r\n.high {\r\n    background-color: rgb(255, 0, 0);\r\n}\r\n\r\n.task {\r\n    color: #fff;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    background-color: #222;\r\n    padding: 1rem;\r\n    border-radius: 4px;\r\n    height: max-content;\r\n    position: relative;\r\n    overflow: hidden;\r\n    transition: all ease 2s;\r\n}\r\n\r\n.task-completed {\r\n    filter: blur(5px);\r\n    opacity: 0;\r\n}\r\n\r\n.desc, .time {\r\n    grid-column: 1 / 3;\r\n}\r\n\r\n.time-left {\r\n    justify-self: end;\r\n    font-family: var(--raleway-font);\r\n    color: rgb(255, 242, 182);\r\n}\r\n\r\n.title {\r\n    font-size: 1.5rem;\r\n    font-family: var(--main-font);\r\n    color: var(--main-color);\r\n}\r\n\r\n.desc {\r\n    font-family: var(--raleway-font);\r\n    margin-bottom: 0.5rem;\r\n    font-size: 0.8rem;\r\n}\r\n\r\n.time {\r\n    font-family: var(--secondary-font);\r\n    font-weight: 400;\r\n}\r\n\r\n.project, .priority {\r\n    font-family: var(--main-font);\r\n    margin-bottom: 0.5rem;\r\n}\r\n\r\n.task-actions {\r\n    grid-column: 1 / 3;\r\n    display: grid;\r\n    grid-template-columns: auto auto 1fr;\r\n    gap: 0.5rem;\r\n\r\n}\r\n\r\n.edit-task, .delete-task {\r\n    background-color: transparent;\r\n    border: 2px solid #606060;\r\n    color: #404040;\r\n    font-weight: 600;\r\n    transition: var(--transition);\r\n}\r\n\r\n.edit-task:hover {\r\n    background-color: #202020;\r\n    color: rgb(255, 255, 88);\r\n    border-color: rgb(255, 255, 88);\r\n}\r\n\r\n.delete-task:hover {\r\n    background-color: #202020;\r\n    color: rgb(255, 53, 53);\r\n    border-color: rgb(255, 53, 53);\r\n}\r\n\r\n.edit-task:active, .delete-task:active {\r\n    background-color: #101010;\r\n    transition: none;\r\n}\r\n\r\n.complete-task {\r\n    background-color: rgb(0, 255, 128);\r\n    color: #101010;\r\n}\r\n\r\n.complete-task:active {\r\n    background-color: rgb(0, 150, 100);\r\n}\r\n\r\n.edit-icon, .delete-icon, .complete-icon {\r\n    margin-right: 0.3rem;\r\n}\r\n\r\n\r\n.no-task-wrapper {\r\n    color: rgb(122, 122, 122);\r\n    display: grid;\r\n    place-items: center;\r\n}\r\n\r\n.no-task-wrapper h2 {\r\n    font-size: 2rem;\r\n    font-family: var(--main-font);\r\n}\r\n\r\n.no-task-wrapper span {\r\n    color: var(--main-color);\r\n    font-size: inherit;\r\n}\r\n\r\n.default-task-container {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n}\r\n\r\n.default-task-container h2 {\r\n    flex: 1;\r\n    font-size: 2.5rem;\r\n    color: #fff;\r\n    font-family: var(--main-font);\r\n}\r\n\r\n.default-task-container span {\r\n    font-size: inherit;\r\n    color: var(--main-color);\r\n}\r\n\r\n.default-task-container img {\r\n    flex: 1;\r\n    max-width: 600px;\r\n}\r\n\r\n@media screen and (max-width: 900px) {\r\n    .default-task-container {\r\n        flex-direction: column-reverse;\r\n        margin: 0 1rem;\r\n    }\r\n\r\n    .default-task-container h2 {\r\n        flex: none;\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 786px){\r\n    .header-btn-wrapper {\r\n        display: none;\r\n    }\r\n\r\n    main {\r\n        display: initial;\r\n    }\r\n\r\n    nav {\r\n        position: fixed;\r\n        bottom: 0%;\r\n        flex-direction: column;\r\n        width: 100vw;\r\n        max-height: 100vh;\r\n        height: max-content;\r\n        padding: 0;\r\n        z-index: 10;\r\n        padding: 0.5rem;\r\n        background-color: #202020;\r\n        transition: var(--transition);\r\n    }\r\n\r\n    .tasks_links_wrapper {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: stretch;\r\n        margin-bottom: 0;\r\n        width: 100%;\r\n    }\r\n\r\n    .projects-tab-container {\r\n        margin-top: 0.2rem;\r\n        display: none;\r\n    }\r\n\r\n    .projects-tab-container h2 {\r\n        margin: 0.5rem;\r\n    }\r\n\r\n    #projects-tab {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n        gap: 0.2rem;\r\n        margin-bottom: 1rem;\r\n    }\r\n    \r\n    .nav_link {\r\n        flex: 1;\r\n        padding: 0.5rem 0.1rem;\r\n        margin: 0 0.2rem;\r\n        color: #fff;\r\n        /* flex-direction: column; */\r\n        flex-wrap: wrap;\r\n        font-weight: 400;\r\n    }\r\n\r\n    .nav_link span {\r\n        margin-bottom: 5px;\r\n    }\r\n    \r\n    #expand_nav {\r\n        display: block;\r\n        flex: 0;\r\n        padding: 0.5rem 0.3rem;\r\n    }\r\n    \r\n    #expand_nav span {\r\n        margin: 0;\r\n        margin-top: 0.2rem;\r\n    }\r\n    \r\n    #projects-tab .nav_link {\r\n        line-break: anywhere;\r\n    }\r\n\r\n    #open-project-model-btn {\r\n        font-weight: 700;\r\n    }\r\n\r\n    .main-container {\r\n        margin: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: calc(100vh - 4rem);\r\n    }\r\n\r\n    .top-container {\r\n        margin: 1rem;\r\n    }\r\n\r\n    #task-container {\r\n        /* overflow-x: hidden; */\r\n        padding: 0.5rem;\r\n        padding-bottom: 10rem;\r\n        flex: 1;\r\n    }\r\n\r\n    .default-task-container h2 {\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .task {\r\n        width: calc(100% - 10px);\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n    }\r\n\r\n    .task-actions {\r\n        width: 100%;\r\n    }\r\n\r\n    .edit-task span, .delete-task span{\r\n        display: none;\r\n    }\r\n\r\n    .edit-task i, .delete-task i {\r\n        margin: 0;\r\n    }\r\n\r\n    .no-task-wrapper h2 {\r\n        font-size: 1.5rem;\r\n        position: relative;\r\n        bottom: 4rem;\r\n    }\r\n\r\n    .open-task-model-btn {\r\n        position: fixed;\r\n        bottom: 5rem;\r\n        right: 1rem;\r\n        border-radius: 50%;\r\n        padding: 1.5rem;\r\n        z-index: 5;\r\n    }\r\n    \r\n    .open-task-model-btn .material-icons {\r\n        transform: scale(1.8);\r\n        margin: 0 !important;\r\n    }\r\n\r\n    .open-task-model-btn .content {\r\n        display: none;\r\n    }\r\n\r\n    #add-task-model {\r\n        z-index: 15;\r\n    }\r\n\r\n    #project-title-wrapper {\r\n        margin: 0.5rem 0.5rem 0.5rem 1rem;\r\n    }\r\n\r\n    #project-title-wrapper h1 {\r\n        font-family: var(--main-font);\r\n    }\r\n}\r\n\r\n@media only screen and (max-width: 425px){\r\n    .no-task-wrapper h2 {\r\n        width: 80%;\r\n    }\r\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);t&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),e&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=e):c[2]=e),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),r.push(c))}},r}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var o={},i=[],s=0;s<n.length;s++){var l=n[s],A=t.base?l[0]+t.base:l[0],c=o[A]||0,d="".concat(A," ").concat(c);o[A]=c+1;var m=e(d),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==m)r[m].references++,r[m].updater(u);else{var f=a(u,t);t.byIndex=s,r.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function a(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,a){var o=t(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=e(o[i]);r[s].references--}for(var l=t(n,a),A=0;A<o.length;A++){var c=e(o[A]);0===r[c].references&&(r[c].updater(),r.splice(c,1))}o=l}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,a&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},505:(n,r,e)=>{e.d(r,{Z:()=>o});var t=e(15),a=e(507);class o{static setStorage(){localStorage.setItem("projectList",JSON.stringify([]))}static updateStorage(){localStorage.setItem("projectList",JSON.stringify(t.Z.projectList))}static getProjectList(){return JSON.parse(localStorage.getItem("projectList"))}static setTaskList(){localStorage.setItem("taskList",JSON.stringify([]))}static updateTaskList(){localStorage.setItem("taskList",JSON.stringify(a.Z.taskList))}static getTaskList(){return JSON.parse(localStorage.getItem("taskList"))}}},842:(n,r,e)=>{e.d(r,{Z:()=>Cn});var t=e(15),a=e(507),o=e(505);function i(n,r){if(r.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+r.length+" present")}function s(n){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},s(n)}function l(n){return i(1,arguments),n instanceof Date||"object"===s(n)&&"[object Date]"===Object.prototype.toString.call(n)}function A(n){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},A(n)}function c(n){i(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===A(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function d(n){if(i(1,arguments),!l(n)&&"number"!=typeof n)return!1;var r=c(n);return!isNaN(Number(r))}function m(n){if(null===n||!0===n||!1===n)return NaN;var r=Number(n);return isNaN(r)?r:r<0?Math.ceil(r):Math.floor(r)}function u(n,r){i(2,arguments);var e=c(n).getTime(),t=m(r);return new Date(e+t)}function f(n,r){i(2,arguments);var e=m(r);return u(n,-e)}var p=864e5;function g(n){i(1,arguments);var r=1,e=c(n),t=e.getUTCDay(),a=(t<r?7:0)+t-r;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function C(n){i(1,arguments);var r=c(n),e=r.getUTCFullYear(),t=new Date(0);t.setUTCFullYear(e+1,0,4),t.setUTCHours(0,0,0,0);var a=g(t),o=new Date(0);o.setUTCFullYear(e,0,4),o.setUTCHours(0,0,0,0);var s=g(o);return r.getTime()>=a.getTime()?e+1:r.getTime()>=s.getTime()?e:e-1}function h(n){i(1,arguments);var r=C(n),e=new Date(0);e.setUTCFullYear(r,0,4),e.setUTCHours(0,0,0,0);var t=g(e);return t}var B=6048e5,b={};function k(){return b}function I(n,r){var e,t,a,o,s,l,A,d;i(1,arguments);var u=k(),f=m(null!==(e=null!==(t=null!==(a=null!==(o=null==r?void 0:r.weekStartsOn)&&void 0!==o?o:null==r||null===(s=r.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==a?a:u.weekStartsOn)&&void 0!==t?t:null===(A=u.locale)||void 0===A||null===(d=A.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==e?e:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=c(n),g=p.getUTCDay(),C=(g<f?7:0)+g-f;return p.setUTCDate(p.getUTCDate()-C),p.setUTCHours(0,0,0,0),p}function v(n,r){var e,t,a,o,s,l,A,d;i(1,arguments);var u=c(n),f=u.getUTCFullYear(),p=k(),g=m(null!==(e=null!==(t=null!==(a=null!==(o=null==r?void 0:r.firstWeekContainsDate)&&void 0!==o?o:null==r||null===(s=r.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:p.firstWeekContainsDate)&&void 0!==t?t:null===(A=p.locale)||void 0===A||null===(d=A.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==e?e:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var C=new Date(0);C.setUTCFullYear(f+1,0,g),C.setUTCHours(0,0,0,0);var h=I(C,r),B=new Date(0);B.setUTCFullYear(f,0,g),B.setUTCHours(0,0,0,0);var b=I(B,r);return u.getTime()>=h.getTime()?f+1:u.getTime()>=b.getTime()?f:f-1}function y(n,r){var e,t,a,o,s,l,A,c;i(1,arguments);var d=k(),u=m(null!==(e=null!==(t=null!==(a=null!==(o=null==r?void 0:r.firstWeekContainsDate)&&void 0!==o?o:null==r||null===(s=r.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==a?a:d.firstWeekContainsDate)&&void 0!==t?t:null===(A=d.locale)||void 0===A||null===(c=A.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1),f=v(n,r),p=new Date(0);p.setUTCFullYear(f,0,u),p.setUTCHours(0,0,0,0);var g=I(p,r);return g}var w=6048e5;function T(n,r){for(var e=n<0?"-":"",t=Math.abs(n).toString();t.length<r;)t="0"+t;return e+t}const x=function(n,r){var e=n.getUTCFullYear(),t=e>0?e:1-e;return T("yy"===r?t%100:t,r.length)},E=function(n,r){var e=n.getUTCMonth();return"M"===r?String(e+1):T(e+1,2)},j=function(n,r){return T(n.getUTCDate(),r.length)},L=function(n,r){return T(n.getUTCHours()%12||12,r.length)},S=function(n,r){return T(n.getUTCHours(),r.length)},M=function(n,r){return T(n.getUTCMinutes(),r.length)},D=function(n,r){return T(n.getUTCSeconds(),r.length)},P=function(n,r){var e=r.length,t=n.getUTCMilliseconds();return T(Math.floor(t*Math.pow(10,e-3)),r.length)};function W(n,r){var e=n>0?"-":"+",t=Math.abs(n),a=Math.floor(t/60),o=t%60;if(0===o)return e+String(a);var i=r||"";return e+String(a)+i+T(o,2)}function Z(n,r){return n%60==0?(n>0?"-":"+")+T(Math.abs(n)/60,2):O(n,r)}function O(n,r){var e=r||"",t=n>0?"-":"+",a=Math.abs(n);return t+T(Math.floor(a/60),2)+e+T(a%60,2)}const Q={G:function(n,r,e){var t=n.getUTCFullYear()>0?1:0;switch(r){case"G":case"GG":case"GGG":return e.era(t,{width:"abbreviated"});case"GGGGG":return e.era(t,{width:"narrow"});default:return e.era(t,{width:"wide"})}},y:function(n,r,e){if("yo"===r){var t=n.getUTCFullYear(),a=t>0?t:1-t;return e.ordinalNumber(a,{unit:"year"})}return x(n,r)},Y:function(n,r,e,t){var a=v(n,t),o=a>0?a:1-a;return"YY"===r?T(o%100,2):"Yo"===r?e.ordinalNumber(o,{unit:"year"}):T(o,r.length)},R:function(n,r){return T(C(n),r.length)},u:function(n,r){return T(n.getUTCFullYear(),r.length)},Q:function(n,r,e){var t=Math.ceil((n.getUTCMonth()+1)/3);switch(r){case"Q":return String(t);case"QQ":return T(t,2);case"Qo":return e.ordinalNumber(t,{unit:"quarter"});case"QQQ":return e.quarter(t,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(t,{width:"narrow",context:"formatting"});default:return e.quarter(t,{width:"wide",context:"formatting"})}},q:function(n,r,e){var t=Math.ceil((n.getUTCMonth()+1)/3);switch(r){case"q":return String(t);case"qq":return T(t,2);case"qo":return e.ordinalNumber(t,{unit:"quarter"});case"qqq":return e.quarter(t,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(t,{width:"narrow",context:"standalone"});default:return e.quarter(t,{width:"wide",context:"standalone"})}},M:function(n,r,e){var t=n.getUTCMonth();switch(r){case"M":case"MM":return E(n,r);case"Mo":return e.ordinalNumber(t+1,{unit:"month"});case"MMM":return e.month(t,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(t,{width:"narrow",context:"formatting"});default:return e.month(t,{width:"wide",context:"formatting"})}},L:function(n,r,e){var t=n.getUTCMonth();switch(r){case"L":return String(t+1);case"LL":return T(t+1,2);case"Lo":return e.ordinalNumber(t+1,{unit:"month"});case"LLL":return e.month(t,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(t,{width:"narrow",context:"standalone"});default:return e.month(t,{width:"wide",context:"standalone"})}},w:function(n,r,e,t){var a=function(n,r){i(1,arguments);var e=c(n),t=I(e,r).getTime()-y(e,r).getTime();return Math.round(t/w)+1}(n,t);return"wo"===r?e.ordinalNumber(a,{unit:"week"}):T(a,r.length)},I:function(n,r,e){var t=function(n){i(1,arguments);var r=c(n),e=g(r).getTime()-h(r).getTime();return Math.round(e/B)+1}(n);return"Io"===r?e.ordinalNumber(t,{unit:"week"}):T(t,r.length)},d:function(n,r,e){return"do"===r?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):j(n,r)},D:function(n,r,e){var t=function(n){i(1,arguments);var r=c(n),e=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var t=r.getTime(),a=e-t;return Math.floor(a/p)+1}(n);return"Do"===r?e.ordinalNumber(t,{unit:"dayOfYear"}):T(t,r.length)},E:function(n,r,e){var t=n.getUTCDay();switch(r){case"E":case"EE":case"EEE":return e.day(t,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(t,{width:"short",context:"formatting"});default:return e.day(t,{width:"wide",context:"formatting"})}},e:function(n,r,e,t){var a=n.getUTCDay(),o=(a-t.weekStartsOn+8)%7||7;switch(r){case"e":return String(o);case"ee":return T(o,2);case"eo":return e.ordinalNumber(o,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,r,e,t){var a=n.getUTCDay(),o=(a-t.weekStartsOn+8)%7||7;switch(r){case"c":return String(o);case"cc":return T(o,r.length);case"co":return e.ordinalNumber(o,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,r,e){var t=n.getUTCDay(),a=0===t?7:t;switch(r){case"i":return String(a);case"ii":return T(a,r.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(t,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(t,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(t,{width:"short",context:"formatting"});default:return e.day(t,{width:"wide",context:"formatting"})}},a:function(n,r,e){var t=n.getUTCHours()/12>=1?"pm":"am";switch(r){case"a":case"aa":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},b:function(n,r,e){var t,a=n.getUTCHours();switch(t=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",r){case"b":case"bb":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},B:function(n,r,e){var t,a=n.getUTCHours();switch(t=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",r){case"B":case"BB":case"BBB":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},h:function(n,r,e){if("ho"===r){var t=n.getUTCHours()%12;return 0===t&&(t=12),e.ordinalNumber(t,{unit:"hour"})}return L(n,r)},H:function(n,r,e){return"Ho"===r?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):S(n,r)},K:function(n,r,e){var t=n.getUTCHours()%12;return"Ko"===r?e.ordinalNumber(t,{unit:"hour"}):T(t,r.length)},k:function(n,r,e){var t=n.getUTCHours();return 0===t&&(t=24),"ko"===r?e.ordinalNumber(t,{unit:"hour"}):T(t,r.length)},m:function(n,r,e){return"mo"===r?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):M(n,r)},s:function(n,r,e){return"so"===r?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):D(n,r)},S:function(n,r){return P(n,r)},X:function(n,r,e,t){var a=(t._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(r){case"X":return Z(a);case"XXXX":case"XX":return O(a);default:return O(a,":")}},x:function(n,r,e,t){var a=(t._originalDate||n).getTimezoneOffset();switch(r){case"x":return Z(a);case"xxxx":case"xx":return O(a);default:return O(a,":")}},O:function(n,r,e,t){var a=(t._originalDate||n).getTimezoneOffset();switch(r){case"O":case"OO":case"OOO":return"GMT"+W(a,":");default:return"GMT"+O(a,":")}},z:function(n,r,e,t){var a=(t._originalDate||n).getTimezoneOffset();switch(r){case"z":case"zz":case"zzz":return"GMT"+W(a,":");default:return"GMT"+O(a,":")}},t:function(n,r,e,t){var a=t._originalDate||n;return T(Math.floor(a.getTime()/1e3),r.length)},T:function(n,r,e,t){return T((t._originalDate||n).getTime(),r.length)}};var U=function(n,r){switch(n){case"P":return r.date({width:"short"});case"PP":return r.date({width:"medium"});case"PPP":return r.date({width:"long"});default:return r.date({width:"full"})}},Y=function(n,r){switch(n){case"p":return r.time({width:"short"});case"pp":return r.time({width:"medium"});case"ppp":return r.time({width:"long"});default:return r.time({width:"full"})}},z={p:Y,P:function(n,r){var e,t=n.match(/(P+)(p+)?/)||[],a=t[1],o=t[2];if(!o)return U(n,r);switch(a){case"P":e=r.dateTime({width:"short"});break;case"PP":e=r.dateTime({width:"medium"});break;case"PPP":e=r.dateTime({width:"long"});break;default:e=r.dateTime({width:"full"})}return e.replace("{{date}}",U(a,r)).replace("{{time}}",Y(o,r))}};const N=z;function _(n){var r=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return r.setUTCFullYear(n.getFullYear()),n.getTime()-r.getTime()}var q=["D","DD"],H=["YY","YYYY"];function F(n){return-1!==q.indexOf(n)}function X(n){return-1!==H.indexOf(n)}function G(n,r,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(r,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(r,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(r,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(r,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var $={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function R(n){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=r.width?String(r.width):n.defaultWidth,t=n.formats[e]||n.formats[n.defaultWidth];return t}}var K,J={date:R({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:R({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:R({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},V={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function nn(n){return function(r,e){var t;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var a=n.defaultFormattingWidth||n.defaultWidth,o=null!=e&&e.width?String(e.width):a;t=n.formattingValues[o]||n.formattingValues[a]}else{var i=n.defaultWidth,s=null!=e&&e.width?String(e.width):n.defaultWidth;t=n.values[s]||n.values[i]}return t[n.argumentCallback?n.argumentCallback(r):r]}}function rn(n){return function(r){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.width,a=t&&n.matchPatterns[t]||n.matchPatterns[n.defaultMatchWidth],o=r.match(a);if(!o)return null;var i,s=o[0],l=t&&n.parsePatterns[t]||n.parsePatterns[n.defaultParseWidth],A=Array.isArray(l)?tn(l,(function(n){return n.test(s)})):en(l,(function(n){return n.test(s)}));i=n.valueCallback?n.valueCallback(A):A,i=e.valueCallback?e.valueCallback(i):i;var c=r.slice(s.length);return{value:i,rest:c}}}function en(n,r){for(var e in n)if(n.hasOwnProperty(e)&&r(n[e]))return e}function tn(n,r){for(var e=0;e<n.length;e++)if(r(n[e]))return e}const an={code:"en-US",formatDistance:function(n,r,e){var t,a=$[n];return t="string"==typeof a?a:1===r?a.one:a.other.replace("{{count}}",r.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+t:t+" ago":t},formatLong:J,formatRelative:function(n,r,e,t){return V[n]},localize:{ordinalNumber:function(n,r){var e=Number(n),t=e%100;if(t>20||t<10)switch(t%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:nn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:nn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:nn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:nn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:nn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(K={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(K.matchPattern);if(!e)return null;var t=e[0],a=n.match(K.parsePattern);if(!a)return null;var o=K.valueCallback?K.valueCallback(a[0]):a[0];o=r.valueCallback?r.valueCallback(o):o;var i=n.slice(t.length);return{value:o,rest:i}}),era:rn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:rn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:rn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:rn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:rn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var on=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,sn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ln=/^'([^]*?)'?$/,An=/''/g,cn=/[a-zA-Z]/;function dn(n,r,e){var t,a,o,s,l,A,u,p,g,C,h,B,b,I,v,y,w,T;i(2,arguments);var x=String(r),E=k(),j=null!==(t=null!==(a=null==e?void 0:e.locale)&&void 0!==a?a:E.locale)&&void 0!==t?t:an,L=m(null!==(o=null!==(s=null!==(l=null!==(A=null==e?void 0:e.firstWeekContainsDate)&&void 0!==A?A:null==e||null===(u=e.locale)||void 0===u||null===(p=u.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==l?l:E.firstWeekContainsDate)&&void 0!==s?s:null===(g=E.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==o?o:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=m(null!==(h=null!==(B=null!==(b=null!==(I=null==e?void 0:e.weekStartsOn)&&void 0!==I?I:null==e||null===(v=e.locale)||void 0===v||null===(y=v.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==b?b:E.weekStartsOn)&&void 0!==B?B:null===(w=E.locale)||void 0===w||null===(T=w.options)||void 0===T?void 0:T.weekStartsOn)&&void 0!==h?h:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var M=c(n);if(!d(M))throw new RangeError("Invalid time value");var D=_(M),P=f(M,D),W={firstWeekContainsDate:L,weekStartsOn:S,locale:j,_originalDate:M},Z=x.match(sn).map((function(n){var r=n[0];return"p"===r||"P"===r?(0,N[r])(n,j.formatLong):n})).join("").match(on).map((function(t){if("''"===t)return"'";var a=t[0];if("'"===a)return mn(t);var o=Q[a];if(o)return null!=e&&e.useAdditionalWeekYearTokens||!X(t)||G(t,r,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!F(t)||G(t,r,String(n)),o(P,t,j.localize,W);if(a.match(cn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return t})).join("");return Z}function mn(n){var r=n.match(ln);return r?r[1].replace(An,"'"):n}function un(n){i(1,arguments);var r=c(n);return r.setHours(0,0,0,0),r}var fn=864e5;function pn(n,r){i(2,arguments);var e=un(n),t=un(r),a=e.getTime()-_(e),o=t.getTime()-_(t);return Math.round((a-o)/fn)}function gn(n,r){var e=n.getFullYear()-r.getFullYear()||n.getMonth()-r.getMonth()||n.getDate()-r.getDate()||n.getHours()-r.getHours()||n.getMinutes()-r.getMinutes()||n.getSeconds()-r.getSeconds()||n.getMilliseconds()-r.getMilliseconds();return e<0?-1:e>0?1:e}class Cn{static openAddTaskModel(){document.getElementById("add-task-model").classList.remove("hidden")}static closeAddTaskModel(){document.getElementById("add-task-model").classList.add("hidden")}static openAddProjectModel(){document.getElementById("add-project-model").classList.remove("hidden")}static createProjectNameErrorMsg(n){document.querySelector(".project-name-error-msg").textContent=`${n} project has already been made.`}static removeErrorMsg(){document.querySelector(".project-name-error-msg").textContent=""}static closeAddProjectModel(){document.getElementById("add-project-model").classList.add("hidden"),Cn.removeErrorMsg()}static createProjectLink({name:n,id:r}){const e=document.createElement("span");e.classList="projectLink-wrapper";const a=document.createElement("button");return a.classList="nav_link project_link flex-1",a.setAttribute("data-projectId",r),a.textContent=n,a.addEventListener("click",(()=>t.Z.openProject(r))),e.appendChild(a),e.appendChild(this.createProjectDelBtn(r)),e}static createProjectDelBtn(n){const r=document.createElement("span");return r.classList+="project-del-btn",r.innerHTML='<i class="fa-regular fa-trash-can delete-icon"></i>',r.setAttribute("data-projectId",n),r.addEventListener("click",(()=>t.Z.deleteProject(n))),r}static createProjectOption({name:n,id:r}){const e=document.createElement("option");return e.value=r,e.textContent=n,e}static renderProjectsTab(){t.Z.projectsTab.innerHTML="",a.Z.taskProject.innerHTML='<option value="">Select a Project</option>',o.Z.getProjectList().map((n=>{t.Z.projectsTab.appendChild(this.createProjectLink(n)),a.Z.taskProject.appendChild(this.createProjectOption(n))})),this.closeAddProjectModel()}static renderProjectTitle(n){document.getElementById("project-title-wrapper").innerHTML="";const r=document.createElement("h1");r.textContent=`${n}.`,document.getElementById("project-title-wrapper").appendChild(r)}static renderProjectTasks(n){if(this.resetTaskContainer(),0===n.tasks.length)return a.Z.taskContainer.classList.add("flex-1"),void(a.Z.taskContainer.innerHTML=`\n                <div class="no-task-wrapper">\n                    <h2>Oops! Looks like <span>${n.name}</span> is empty.</h2>\n                </div>\n            `);a.Z.taskContainer.classList.remove("flex-1");const r=n.name;this.renderProjectTitle(r),n.tasks.map((n=>{const r=this.createTaskUiElement(n);a.Z.taskContainer.appendChild(r)}))}static createTaskUiElement(n,r="Project"){const{title:e,desc:o,deadline:i,priority:s,projectId:l,taskId:A}=n,c=t.Z.getProject(l),d=document.createElement("div");d.classList.add("task"),d.setAttribute("id",`prj-${l}_tsk-${A}`),d.setAttribute("data-ProjectId",l),d.setAttribute("data-taskId",A);const m=document.createElement("span");m.classList+=`priority-bar ${s}`;const u=document.createElement("h2");u.classList+="title",u.textContent=e;const f=document.createElement("span");f.classList+="time-left",f.innerHTML=`<i class="fa-solid fa-stopwatch"></i>&nbsp;${this.getTimeLeft(i)}`;const p=document.createElement("p");p.classList+="desc",p.textContent=o;const g=document.createElement("h3");g.classList+="time",g.textContent=`Due date: ${this.getFormattedTime(i)}`;const C=document.createElement("h3");C.classList+="priority",C.innerHTML=`Priority: <span class="color-${s}">${s}</span>`;const h=document.createElement("h3");h.classList+="project",h.textContent=`Project: ${c.name}`;const B=document.createElement("div");B.classList+="task-actions";const b=document.createElement("button");b.classList+="edit-task btn",b.setAttribute("id","open-edit-task-model"),b.innerHTML='<i class="fa-sharp fa-solid fa-pen edit-icon"></i><span>Edit</span>',b.addEventListener("click",(()=>this.openEditTaskModel(l,A,r)));const k=document.createElement("button");k.classList+="delete-task btn",k.setAttribute("id","delete-task-btn"),k.innerHTML='<i class="fa-regular fa-trash-can delete-icon"></i><span>Delete</span>',k.addEventListener("click",(()=>a.Z.deleteTask(l,A,r)));const I=document.createElement("button");return I.classList+="complete-task btn",I.setAttribute("id","complete-task-btn"),I.innerHTML='<i class="fa-solid fa-circle-check complete-icon"></i><span>Complete</span>',I.addEventListener("click",(()=>a.Z.completeTask(l,A,r))),B.appendChild(b),B.appendChild(k),B.appendChild(I),d.appendChild(m),d.appendChild(u),d.appendChild(f),d.appendChild(p),d.appendChild(g),d.appendChild(C),d.appendChild(h),d.appendChild(B),d}static getFormattedTime(n){const{dueTime:r,dueDate:e}=n,t=new Date(e);return t.setHours(r.slice(0,2),r.slice(3,5)),`${dn(t,"p")}, ${dn(t,"PP")}`}static getTimeLeft(n){const{dueTime:r,dueDate:e}=n,t=r.slice(0,2),a=r.slice(3,5),o=new Date,i=new Date(e);i.setHours(t,a);const s=new Date(i.getTime()-o.getTime()),l=s.getUTCDate()-1,A=s.getUTCHours(),c=s.getUTCMinutes();return`${0===l?"":`${l} Days,`} \n                ${0===A?"":`${A} Hrs,`} \n                ${0===c?"":`${c} Mins`}`}static resetTaskContainer(){a.Z.taskContainer.innerHTML="",document.getElementById("project-title-wrapper").innerHTML=""}static openEditTaskModel(n,r,e){const o=t.Z.getProject(n),{name:i,tasks:s}=o;let l={};s.map((n=>n.taskId===r?l=n:""));const A=document.createElement("div");A.classList+="model",A.setAttribute("id","edit-task-model"),A.innerHTML=`\n        <form action="" onSubmit="return false" onReset="return false" class="add-task-form" id="edit-task-form">\n          <span>\n            <h2>Edit Task</h2>\n          </span>\n          <span>\n            <label for="task-title" class="label">New Title*</label>\n            <input\n              class="form-control"\n              type="text"\n              id="new-task-title"\n              name="task-title"\n              value="${l.title}"\n              placeholder="Meeting with John"\n              required\n              autocomplete="off"\n            />\n          </span>\n          <span>\n            <label for="task-desc" class="label">New Description*</label>\n            <textarea\n              class="form-control"\n              placeholder="John will wait at the society park."\n              style="resize: none"\n              name="task-desc"\n              id="new-task-desc"\n              cols="30"\n              rows="5"\n              required\n              autocomplete="off"\n            >${l.desc}</textarea>\n          </span>\n          <span class="due-date-span">\n            <label for="task-due-date" class="label">New Due Date*</label>\n            <span>\n              <input\n                class="form-control"\n                type="time"\n                name="task-due-time"\n                id="new-task-due-time"\n                value="${l.deadline.dueTime}"\n              />\n              <input\n                class="form-control"\n                type="date"\n                name="task-due-date"\n                id="new-task-due-date"\n                value="${l.deadline.dueDate}"\n                required\n              />\n            </span>\n          </span>\n          <span class="priority-span">\n            <label for="task-priority" class="label">Priority</label>\n            <select name="task-priority" class="form-control" id="new-task-priority">\n              <option value="low" class="color-low" ${"low"===l.priority?"selected":""}>Low</option>\n              <option value="medium" class="color-medium" ${"medium"===l.priority?"selected":""}>Medium</option>\n              <option value="high" class="color-high" ${"high"===l.priority?"selected":""}>High</option>\n            </select>\n          </span>\n          <span class="project-span">\n            <label for="task-project" class="label">Project</label>\n            <select\n              class="form-control"\n              name="task-project"\n              id="task-project"\n              disabled\n              required\n            >\n              <option value="${l.projectId}">\n                ${i}\n              </option>\n            </select>\n          </span>\n          <button type="submit" id="edit-task-btn" class="btn add-btn">\n            Edit Task\n          </button>\n          <button type="reset" id="cancel-edit-task-btn" class="btn cancel-btn">\n            Cancel\n          </button>\n        </form>`,document.body.appendChild(A),document.getElementById("edit-task-btn").addEventListener("click",(()=>a.Z.editTask(n,r,e))),document.getElementById("cancel-edit-task-btn").addEventListener("click",this.closeEditTaskModel)}static closeEditTaskModel(){const n=document.getElementById("edit-task-model");document.body.removeChild(n)}static renderTasks(n){if([...document.querySelectorAll(".nav_link")].map((n=>n.classList.remove("active"))),Cn.resetTaskContainer(),0===a.Z.taskList.length)return a.Z.taskContainer.classList.add("flex-1"),void(a.Z.taskContainer.innerHTML='\n                <div class="no-task-wrapper">\n                    <h2>Oops! Looks like there are no <span>Tasks</span></h2>\n                </div>\n            ');a.Z.taskContainer.classList.remove("flex-1"),"ALL_TASKS"===n&&this.renderAllTasks(),"TODAY_TASKS"===n&&this.renderTodayTasks(),"WEEK_TASKS"===n&&this.renderWeekTasks()}static renderAllTasks(){Cn.renderProjectTitle("All tasks"),document.getElementById("list_all_tasks").classList.add("active"),a.Z.taskList.map((n=>{const r=Cn.createTaskUiElement(n,"ALL_TASKS");a.Z.taskContainer.appendChild(r)}))}static renderTodayTasks(){Cn.renderProjectTitle("Today tasks"),document.getElementById("list_today_tasks").classList.add("active");let n=!0;a.Z.taskList.map((r=>{const e=r.deadline.dueDate,t=(new Date).getDate();if(console.log(e.slice(-2)),parseInt(e.slice(-2))==t){const e=Cn.createTaskUiElement(r,"TODAY_TASKS");a.Z.taskContainer.appendChild(e),n=!1}})),n&&(a.Z.taskContainer.classList.add("flex-1"),a.Z.taskContainer.innerHTML='\n                <div class="no-task-wrapper">\n                    <h2>Oops! Looks like there are no <span>Tasks</span></h2>\n                </div>')}static renderWeekTasks(){let n=!0;Cn.renderProjectTitle("Week tasks"),document.getElementById("list_week_tasks").classList.add("active"),a.Z.taskList.map((r=>{const{dueDate:e}=r.deadline,t=new Date,o=function(n,r){i(2,arguments);var e=c(n),t=c(r),a=gn(e,t),o=Math.abs(pn(e,t));e.setDate(e.getDate()-a*o);var s=Number(gn(e,t)===-a),l=a*(o-s);return 0===l?0:l}(new Date(e),t);if(o<7){const e=Cn.createTaskUiElement(r,"WEEK_TASKS");a.Z.taskContainer.appendChild(e),n=!1}})),n&&(a.Z.taskContainer.classList.add("flex-1"),a.Z.taskContainer.innerHTML='\n                <div class="no-task-wrapper">\n                    <h2>Oops! Looks like there are no <span>Tasks</span></h2>\n                </div>')}}const hn=document.getElementById("expand_nav");hn.addEventListener("click",(function(n){!1===Bn?(document.querySelector(".projects-tab-container").style.display="flex",hn.innerHTML='<span class="material-symbols-outlined">\n                                    keyboard_double_arrow_down\n                                  </span>',Bn=!0):(document.querySelector(".projects-tab-container").style.display="none",hn.innerHTML='<span class="material-symbols-outlined">\n        keyboard_double_arrow_up\n    </span>',Bn=!1)}));let Bn=!1;document.getElementById("login-btn").addEventListener("click",(()=>alert("Sorry! we don't support this feature right now."))),document.getElementById("sign-up-btn").addEventListener("click",(()=>alert("Sorry! we don't support this feature right now.")))},987:(n,r,e)=>{var t=e(379),a=e.n(t),o=e(795),i=e.n(o),s=e(569),l=e.n(s),A=e(565),c=e.n(A),d=e(216),m=e.n(d),u=e(589),f=e.n(u),p=e(426),g={};g.styleTagTransform=f(),g.setAttributes=c(),g.insert=l().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=m(),a()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals;var C=e(507),h=e(842),B=e(15),b=e(505);document.addEventListener("DOMContentLoaded",(()=>{0===localStorage.length&&(b.Z.setStorage(),b.Z.setTaskList()),B.Z.projectList=[...b.Z.getProjectList()],C.Z.taskList=[...b.Z.getTaskList()];for(let n=0;n<B.Z.projectList.length;n++){const r=B.Z.projectList[n];for(let e=0;e<r.tasks.length;e++){const t=r.tasks[e];B.Z.projectList[n].tasks[e]=Object.assign(new C.Z,t)}}for(let n=0;n<C.Z.taskList.length;n++){const r=C.Z.taskList[n];C.Z.taskList[n]=Object.assign(new C.Z,r)}h.Z.renderProjectsTab()})),C.Z.openTaskBModelBtn.addEventListener("click",h.Z.openAddTaskModel),C.Z.cancelAddTaskBtn.addEventListener("click",h.Z.closeAddTaskModel),C.Z.addTaskBtn.addEventListener("click",C.Z.createTask),B.Z.openProjectModelBtn.addEventListener("click",h.Z.openAddProjectModel),B.Z.cancelAddProjectBtn.addEventListener("click",h.Z.closeAddProjectModel),B.Z.createProjectBtn.addEventListener("click",B.Z.createProject),document.getElementById("list_today_tasks").addEventListener("click",(()=>h.Z.renderTasks("TODAY_TASKS"))),document.getElementById("list_week_tasks").addEventListener("click",(()=>h.Z.renderTasks("WEEK_TASKS"))),document.getElementById("list_all_tasks").addEventListener("click",(()=>h.Z.renderTasks("ALL_TASKS")))},15:(n,r,e)=>{e.d(r,{Z:()=>i});var t=e(505),a=e(507),o=e(842);class i{static projectList=[];static openProjectModelBtn=document.getElementById("open-project-model-btn");static createProjectBtn=document.getElementById("add-project-btn");static cancelAddProjectBtn=document.getElementById("cancel-add-project-btn");static projectsTab=document.getElementById("projects-tab");static projectName=document.getElementById("project-title");static addProject=function(n,r){r.push(n),t.Z.updateStorage()};static createProject=function(){const n=i.projectName.value;if(!1!==i.checkProject(n)){const r=new i(n);i.addProject(r,i.projectList),o.Z.renderProjectsTab(),i.projectName.value=""}};static checkProject=function(n){let r=n;if(r=r.trim(),""!==r){for(const n of i.projectList)if(n.name===r)return o.Z.createProjectNameErrorMsg(r),!1;return!0}return!1};static deleteProject(n){!0===this.isProjectOpened(n)&&(o.Z.resetTaskContainer(),a.Z.taskContainer.innerHTML='<div class="default-task-container">\n            <h2>Let\'s start by making or opening a <span>Project</span>.</h2>\n            <img src="./home_svg.svg" alt="" width="300px">\n          </div>'),this.projectList=[...i.projectList.filter((r=>r.id!==n))],a.Z.taskList=[...a.Z.taskList.filter((r=>r.projectId!==n))],t.Z.updateStorage(),t.Z.updateTaskList(),o.Z.renderProjectsTab()}static openProject(n){[...document.querySelectorAll(".nav_link")].map((n=>n.classList.remove("active"))),[...document.querySelectorAll(".nav_link")].map((r=>{parseInt(r.getAttribute("data-projectId"))===n&&r.classList.add("active")})),i.projectList.map((r=>{r.isOpened=!1,r.id===n&&(o.Z.renderProjectTasks(r),r.isOpened=!0)}))}static removeTaskFromProjectList(n,r){i.projectList.map((e=>{e.id===n&&(e.tasks=e.tasks.filter((n=>n.taskId!==r)))}))}static getProject(n){let r={};return i.projectList.map((e=>{e.id===n&&(r={...e})})),r}static isProjectOpened(n){if(!0===this.getProject(n).isOpened)return!0}constructor(n){this.name=n,this.id=0===i.projectList.length?0:i.projectList[i.projectList.length-1].id+1,this.isOpened=!1,this.tasks=[]}addTask(n){this.tasks.unshift(n)}}},507:(n,r,e)=>{e.d(r,{Z:()=>i});var t=e(15),a=e(505),o=e(842);class i{static openTaskBModelBtn=document.getElementById("open-task-model-btn");static addTaskBtn=document.getElementById("add-task-btn");static cancelAddTaskBtn=document.getElementById("cancel-add-task-btn");static taskTitle=document.getElementById("task-title");static taskDesc=document.getElementById("task-desc");static taskDueDate=document.getElementById("task-due-date");static taskDueTime=document.getElementById("task-due-time");static taskPriority=document.getElementById("task-priority");static taskProject=document.getElementById("task-project");static taskContainer=document.getElementById("task-container");static taskList=[];static createTask(){const n=new i(i.taskTitle.value,i.taskDesc.value,i.taskDueDate.value,i.taskDueTime.value,i.taskPriority.value,parseInt(i.taskProject.value));i.addTask(n)}static addTask=function(n){t.Z.projectList[n.projectId].tasks.unshift(n),i.taskList.unshift(n),t.Z.openProject(n.projectId),a.Z.updateStorage(),a.Z.updateTaskList(),o.Z.closeAddTaskModel()};static deleteTask(n,r,e){t.Z.removeTaskFromProjectList(n,r),i.removeTaskFromTaskList(r),a.Z.updateStorage(),a.Z.updateTaskList();const s=t.Z.getProject(n);switch(e){case"ALL_TASKS":case"TODAY_TASKS":case"WEEK_TASKS":o.Z.renderTasks(e);break;default:o.Z.renderProjectTasks(s)}}static editTask(n,r,e){const s=document.getElementById("new-task-title").value,l=document.getElementById("new-task-desc").value,A={newDueTime:document.getElementById("new-task-due-time").value,newDueDate:document.getElementById("new-task-due-date").value},c=document.getElementById("new-task-priority").value;let d,m;switch(t.Z.projectList.map(((r,e)=>r.id===n?d=e:null)),t.Z.projectList[d].tasks.map(((n,e)=>n.taskId===r?m=e:null)),t.Z.projectList[d].tasks[m].editTaskDetails(s,l,A,c),i.taskList.map((n=>{n.taskId===r&&n.editTaskDetails(s,l,A,c)})),a.Z.updateStorage(),a.Z.updateTaskList(),e){case"ALL_TASKS":case"TODAY_TASKS":case"WEEK_TASKS":o.Z.renderTasks(e);break;default:o.Z.renderProjectTasks(t.Z.projectList[d])}o.Z.closeEditTaskModel()}static removeTaskFromTaskList(n){i.taskList=i.taskList.filter((r=>r.taskId!==n))}static completeTask(n,r,e){document.getElementById(`prj-${n}_tsk-${r}`).classList.add("task-completed"),setTimeout((()=>{this.deleteTask(n,r,e)}),2e3)}constructor(n,r,e,t,a,o){this.title=n,this.taskId=0===i.taskList.length?0:i.taskList[0].taskId+1,this.desc=r,this.deadline={dueTime:t,dueDate:e},this.priority=a,this.projectId=o}editTaskDetails(n,r,e,t){this.title=n,this.desc=r,this.deadline.dueTime=e.newDueTime,this.deadline.dueDate=e.newDueDate,this.priority=t}}}},n=>{n(n.s=987)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,