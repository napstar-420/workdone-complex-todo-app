"use strict";(self.webpackChunktodo_app=self.webpackChunktodo_app||[]).push([[242,930,522,851],{505:(t,e,n)=>{n.d(e,{Z:()=>i});var a=n(15),r=n(507);class i{static setStorage(){localStorage.setItem("projectList",JSON.stringify([]))}static updateStorage(){localStorage.setItem("projectList",JSON.stringify(a.Z.projectList))}static getProjectList(){return JSON.parse(localStorage.getItem("projectList"))}static setTaskList(){localStorage.setItem("taskList",JSON.stringify([]))}static updateTaskList(){localStorage.setItem("taskList",JSON.stringify(r.Z.taskList))}static getTaskList(){return JSON.parse(localStorage.getItem("taskList"))}}},842:(t,e,n)=>{n.d(e,{Z:()=>gt});var a=n(15),r=n(507),i=n(505);function o(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function s(t){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s(t)}function d(t){return o(1,arguments),t instanceof Date||"object"===s(t)&&"[object Date]"===Object.prototype.toString.call(t)}function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function l(t){o(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===c(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function u(t){if(o(1,arguments),!d(t)&&"number"!=typeof t)return!1;var e=l(t);return!isNaN(Number(e))}function m(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function h(t,e){o(2,arguments);var n=l(t).getTime(),a=m(e);return new Date(n+a)}function f(t,e){o(2,arguments);var n=m(e);return h(t,-n)}var p=864e5;function g(t){o(1,arguments);var e=1,n=l(t),a=n.getUTCDay(),r=(a<e?7:0)+a-e;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function v(t){o(1,arguments);var e=l(t),n=e.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=g(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var s=g(i);return e.getTime()>=r.getTime()?n+1:e.getTime()>=s.getTime()?n:n-1}function k(t){o(1,arguments);var e=v(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var a=g(n);return a}var w=6048e5,b={};function y(){return b}function T(t,e){var n,a,r,i,s,d,c,u;o(1,arguments);var h=y(),f=m(null!==(n=null!==(a=null!==(r=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(s=e.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==r?r:h.weekStartsOn)&&void 0!==a?a:null===(c=h.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==n?n:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=l(t),g=p.getUTCDay(),v=(g<f?7:0)+g-f;return p.setUTCDate(p.getUTCDate()-v),p.setUTCHours(0,0,0,0),p}function L(t,e){var n,a,r,i,s,d,c,u;o(1,arguments);var h=l(t),f=h.getUTCFullYear(),p=y(),g=m(null!==(n=null!==(a=null!==(r=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(s=e.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:p.firstWeekContainsDate)&&void 0!==a?a:null===(c=p.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(f+1,0,g),v.setUTCHours(0,0,0,0);var k=T(v,e),w=new Date(0);w.setUTCFullYear(f,0,g),w.setUTCHours(0,0,0,0);var b=T(w,e);return h.getTime()>=k.getTime()?f+1:h.getTime()>=b.getTime()?f:f-1}function C(t,e){var n,a,r,i,s,d,c,l;o(1,arguments);var u=y(),h=m(null!==(n=null!==(a=null!==(r=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(s=e.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==a?a:null===(c=u.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),f=L(t,e),p=new Date(0);p.setUTCFullYear(f,0,h),p.setUTCHours(0,0,0,0);var g=T(p,e);return g}var j=6048e5;function M(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const E=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return M("yy"===e?a%100:a,e.length)},S=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):M(n+1,2)},P=function(t,e){return M(t.getUTCDate(),e.length)},D=function(t,e){return M(t.getUTCHours()%12||12,e.length)},x=function(t,e){return M(t.getUTCHours(),e.length)},I=function(t,e){return M(t.getUTCMinutes(),e.length)},Z=function(t,e){return M(t.getUTCSeconds(),e.length)},U=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return M(Math.floor(a*Math.pow(10,n-3)),e.length)};function A(t,e){var n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=e||"";return n+String(r)+o+M(i,2)}function B(t,e){return t%60==0?(t>0?"-":"+")+M(Math.abs(t)/60,2):W(t,e)}function W(t,e){var n=e||"",a=t>0?"-":"+",r=Math.abs(t);return a+M(Math.floor(r/60),2)+n+M(r%60,2)}const O={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return E(t,e)},Y:function(t,e,n,a){var r=L(t,a),i=r>0?r:1-r;return"YY"===e?M(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):M(i,e.length)},R:function(t,e){return M(v(t),e.length)},u:function(t,e){return M(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return M(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return M(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return S(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return M(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){var r=function(t,e){o(1,arguments);var n=l(t),a=T(n,e).getTime()-C(n,e).getTime();return Math.round(a/j)+1}(t,a);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):M(r,e.length)},I:function(t,e,n){var a=function(t){o(1,arguments);var e=l(t),n=g(e).getTime()-k(e).getTime();return Math.round(n/w)+1}(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):M(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):P(t,e)},D:function(t,e,n){var a=function(t){o(1,arguments);var e=l(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=e.getTime(),r=n-a;return Math.floor(r/p)+1}(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):M(a,e.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return M(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return M(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return M(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,r=t.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,r=t.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return D(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):x(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):M(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):M(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):I(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Z(t,e)},S:function(t,e){return U(t,e)},X:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return B(r);case"XXXX":case"XX":return W(r);default:return W(r,":")}},x:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return B(r);case"xxxx":case"xx":return W(r);default:return W(r,":")}},O:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+A(r,":");default:return"GMT"+W(r,":")}},z:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+A(r,":");default:return"GMT"+W(r,":")}},t:function(t,e,n,a){var r=a._originalDate||t;return M(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return M((a._originalDate||t).getTime(),e.length)}};var H=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},N=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},Y={p:N,P:function(t,e){var n,a=t.match(/(P+)(p+)?/)||[],r=a[1],i=a[2];if(!i)return H(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",H(r,e)).replace("{{time}}",N(i,e))}};const q=Y;function _(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var F=["D","DD"],$=["YY","YYYY"];function z(t){return-1!==F.indexOf(t)}function K(t){return-1!==$.indexOf(t)}function Q(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function J(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,a=t.formats[n]||t.formats[t.defaultWidth];return a}}var X,R={date:J({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:J({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:J({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},V={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function tt(t){return function(e,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):r;a=t.formattingValues[i]||t.formattingValues[r]}else{var o=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;a=t.values[s]||t.values[o]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function et(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;var o,s=i[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(d)?at(d,(function(t){return t.test(s)})):nt(d,(function(t){return t.test(s)}));o=t.valueCallback?t.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=e.slice(s.length);return{value:o,rest:l}}}function nt(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function at(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const rt={code:"en-US",formatDistance:function(t,e,n){var a,r=G[t];return a="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:R,formatRelative:function(t,e,n,a){return V[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:tt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:tt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:tt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:tt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:tt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(X={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(X.matchPattern);if(!n)return null;var a=n[0],r=t.match(X.parsePattern);if(!r)return null;var i=X.valueCallback?X.valueCallback(r[0]):r[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(a.length);return{value:i,rest:o}}),era:et({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:et({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:et({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:et({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:et({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var it=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ot=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,st=/^'([^]*?)'?$/,dt=/''/g,ct=/[a-zA-Z]/;function lt(t,e,n){var a,r,i,s,d,c,h,p,g,v,k,w,b,T,L,C,j,M;o(2,arguments);var E=String(e),S=y(),P=null!==(a=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:S.locale)&&void 0!==a?a:rt,D=m(null!==(i=null!==(s=null!==(d=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(h=n.locale)||void 0===h||null===(p=h.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==d?d:S.firstWeekContainsDate)&&void 0!==s?s:null===(g=S.locale)||void 0===g||null===(v=g.options)||void 0===v?void 0:v.firstWeekContainsDate)&&void 0!==i?i:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var x=m(null!==(k=null!==(w=null!==(b=null!==(T=null==n?void 0:n.weekStartsOn)&&void 0!==T?T:null==n||null===(L=n.locale)||void 0===L||null===(C=L.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==b?b:S.weekStartsOn)&&void 0!==w?w:null===(j=S.locale)||void 0===j||null===(M=j.options)||void 0===M?void 0:M.weekStartsOn)&&void 0!==k?k:0);if(!(x>=0&&x<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!P.localize)throw new RangeError("locale must contain localize property");if(!P.formatLong)throw new RangeError("locale must contain formatLong property");var I=l(t);if(!u(I))throw new RangeError("Invalid time value");var Z=_(I),U=f(I,Z),A={firstWeekContainsDate:D,weekStartsOn:x,locale:P,_originalDate:I},B=E.match(ot).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,q[e])(t,P.formatLong):t})).join("").match(it).map((function(a){if("''"===a)return"'";var r=a[0];if("'"===r)return ut(a);var i=O[r];if(i)return null!=n&&n.useAdditionalWeekYearTokens||!K(a)||Q(a,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!z(a)||Q(a,e,String(t)),i(U,a,P.localize,A);if(r.match(ct))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return a})).join("");return B}function ut(t){var e=t.match(st);return e?e[1].replace(dt,"'"):t}function mt(t){o(1,arguments);var e=l(t);return e.setHours(0,0,0,0),e}var ht=864e5;function ft(t,e){o(2,arguments);var n=mt(t),a=mt(e),r=n.getTime()-_(n),i=a.getTime()-_(a);return Math.round((r-i)/ht)}function pt(t,e){var n=t.getFullYear()-e.getFullYear()||t.getMonth()-e.getMonth()||t.getDate()-e.getDate()||t.getHours()-e.getHours()||t.getMinutes()-e.getMinutes()||t.getSeconds()-e.getSeconds()||t.getMilliseconds()-e.getMilliseconds();return n<0?-1:n>0?1:n}class gt{static openAddTaskModel(){document.getElementById("add-task-model").classList.remove("hidden")}static closeAddTaskModel(){document.getElementById("add-task-model").classList.add("hidden")}static openAddProjectModel(){document.getElementById("add-project-model").classList.remove("hidden")}static createProjectNameErrorMsg(t){document.querySelector(".project-name-error-msg").textContent=`${t} project has already been made.`}static removeErrorMsg(){document.querySelector(".project-name-error-msg").textContent=""}static closeAddProjectModel(){document.getElementById("add-project-model").classList.add("hidden"),gt.removeErrorMsg()}static createProjectLink({name:t,id:e}){const n=document.createElement("span");n.classList="projectLink-wrapper";const r=document.createElement("button");return r.classList="nav_link project_link flex-1",r.setAttribute("data-projectId",e),r.textContent=t,r.addEventListener("click",(()=>a.Z.openProject(e))),n.appendChild(r),n.appendChild(this.createProjectDelBtn(e)),n}static createProjectDelBtn(t){const e=document.createElement("span");return e.classList+="project-del-btn",e.innerHTML='<i class="fa-regular fa-trash-can delete-icon"></i>',e.setAttribute("data-projectId",t),e.addEventListener("click",(()=>a.Z.deleteProject(t))),e}static createProjectOption({name:t,id:e}){const n=document.createElement("option");return n.value=e,n.textContent=t,n}static renderProjectsTab(){a.Z.projectsTab.innerHTML="",r.Z.taskProject.innerHTML='<option value="">Select a Project</option>',i.Z.getProjectList().map((t=>{a.Z.projectsTab.appendChild(this.createProjectLink(t)),r.Z.taskProject.appendChild(this.createProjectOption(t))})),this.closeAddProjectModel()}static renderProjectTitle(t){document.getElementById("project-title-wrapper").innerHTML="";const e=document.createElement("h1");e.textContent=`${t}.`,document.getElementById("project-title-wrapper").appendChild(e)}static renderProjectTasks(t){if(this.resetTaskContainer(),0===t.tasks.length)return r.Z.taskContainer.classList.add("flex-1"),void(r.Z.taskContainer.innerHTML=`\n                <div class="no-task-wrapper">\n                    <h2>Oops! Looks like <span>${t.name}</span> is empty.</h2>\n                </div>\n            `);r.Z.taskContainer.classList.remove("flex-1");const e=t.name;this.renderProjectTitle(e),t.tasks.map((t=>{const e=this.createTaskUiElement(t);r.Z.taskContainer.appendChild(e)}))}static createTaskUiElement(t,e="Project"){const{title:n,desc:i,deadline:o,priority:s,projectId:d,taskId:c}=t,l=a.Z.getProject(d),u=document.createElement("div");u.classList.add("task"),u.setAttribute("id",`prj-${d}_tsk-${c}`),u.setAttribute("data-ProjectId",d),u.setAttribute("data-taskId",c);const m=document.createElement("span");m.classList+=`priority-bar ${s}`;const h=document.createElement("h2");h.classList+="title",h.textContent=n;const f=document.createElement("span");f.classList+="time-left",f.innerHTML=`<i class="fa-solid fa-stopwatch"></i>&nbsp;${this.getTimeLeft(o)}`;const p=document.createElement("p");p.classList+="desc",p.textContent=i;const g=document.createElement("h3");g.classList+="time",g.textContent=`Due date: ${this.getFormattedTime(o)}`;const v=document.createElement("h3");v.classList+="priority",v.innerHTML=`Priority: <span class="color-${s}">${s}</span>`;const k=document.createElement("h3");k.classList+="project",k.textContent=`Project: ${l.name}`;const w=document.createElement("div");w.classList+="task-actions";const b=document.createElement("button");b.classList+="edit-task btn",b.setAttribute("id","open-edit-task-model"),b.innerHTML='<i class="fa-sharp fa-solid fa-pen edit-icon"></i><span>Edit</span>',b.addEventListener("click",(()=>this.openEditTaskModel(d,c,e)));const y=document.createElement("button");y.classList+="delete-task btn",y.setAttribute("id","delete-task-btn"),y.innerHTML='<i class="fa-regular fa-trash-can delete-icon"></i><span>Delete</span>',y.addEventListener("click",(()=>r.Z.deleteTask(d,c,e)));const T=document.createElement("button");return T.classList+="complete-task btn",T.setAttribute("id","complete-task-btn"),T.innerHTML='<i class="fa-solid fa-circle-check complete-icon"></i><span>Complete</span>',T.addEventListener("click",(()=>r.Z.completeTask(d,c,e))),w.appendChild(b),w.appendChild(y),w.appendChild(T),u.appendChild(m),u.appendChild(h),u.appendChild(f),u.appendChild(p),u.appendChild(g),u.appendChild(v),u.appendChild(k),u.appendChild(w),u}static getFormattedTime(t){const{dueTime:e,dueDate:n}=t,a=new Date(n);return a.setHours(e.slice(0,2),e.slice(3,5)),`${lt(a,"p")}, ${lt(a,"PP")}`}static getTimeLeft(t){const{dueTime:e,dueDate:n}=t,a=e.slice(0,2),r=e.slice(3,5),i=new Date,o=new Date(n);o.setHours(a,r);const s=new Date(o.getTime()-i.getTime()),d=s.getUTCDate()-1,c=s.getUTCHours(),l=s.getUTCMinutes();return`${0===d?"":`${d} Days,`} \n                ${0===c?"":`${c} Hrs,`} \n                ${0===l?"":`${l} Mins`}`}static resetTaskContainer(){r.Z.taskContainer.innerHTML="",document.getElementById("project-title-wrapper").innerHTML=""}static openEditTaskModel(t,e,n){const i=a.Z.getProject(t),{name:o,tasks:s}=i;let d={};s.map((t=>t.taskId===e?d=t:""));const c=document.createElement("div");c.classList+="model",c.setAttribute("id","edit-task-model"),c.innerHTML=`\n        <form action="" onSubmit="return false" onReset="return false" class="add-task-form" id="edit-task-form">\n          <span>\n            <h2>Edit Task</h2>\n          </span>\n          <span>\n            <label for="task-title" class="label">New Title*</label>\n            <input\n              class="form-control"\n              type="text"\n              id="new-task-title"\n              name="task-title"\n              value="${d.title}"\n              placeholder="Meeting with John"\n              required\n              autocomplete="off"\n            />\n          </span>\n          <span>\n            <label for="task-desc" class="label">New Description*</label>\n            <textarea\n              class="form-control"\n              placeholder="John will wait at the society park."\n              style="resize: none"\n              name="task-desc"\n              id="new-task-desc"\n              cols="30"\n              rows="5"\n              required\n              autocomplete="off"\n            >${d.desc}</textarea>\n          </span>\n          <span class="due-date-span">\n            <label for="task-due-date" class="label">New Due Date*</label>\n            <span>\n              <input\n                class="form-control"\n                type="time"\n                name="task-due-time"\n                id="new-task-due-time"\n                value="${d.deadline.dueTime}"\n              />\n              <input\n                class="form-control"\n                type="date"\n                name="task-due-date"\n                id="new-task-due-date"\n                value="${d.deadline.dueDate}"\n                required\n              />\n            </span>\n          </span>\n          <span class="priority-span">\n            <label for="task-priority" class="label">Priority</label>\n            <select name="task-priority" class="form-control" id="new-task-priority">\n              <option value="low" class="color-low" ${"low"===d.priority?"selected":""}>Low</option>\n              <option value="medium" class="color-medium" ${"medium"===d.priority?"selected":""}>Medium</option>\n              <option value="high" class="color-high" ${"high"===d.priority?"selected":""}>High</option>\n            </select>\n          </span>\n          <span class="project-span">\n            <label for="task-project" class="label">Project</label>\n            <select\n              class="form-control"\n              name="task-project"\n              id="task-project"\n              disabled\n              required\n            >\n              <option value="${d.projectId}">\n                ${o}\n              </option>\n            </select>\n          </span>\n          <button type="submit" id="edit-task-btn" class="btn add-btn">\n            Edit Task\n          </button>\n          <button type="reset" id="cancel-edit-task-btn" class="btn cancel-btn">\n            Cancel\n          </button>\n        </form>`,document.body.appendChild(c),document.getElementById("edit-task-btn").addEventListener("click",(()=>r.Z.editTask(t,e,n))),document.getElementById("cancel-edit-task-btn").addEventListener("click",this.closeEditTaskModel)}static closeEditTaskModel(){const t=document.getElementById("edit-task-model");document.body.removeChild(t)}static renderTasks(t){if([...document.querySelectorAll(".nav_link")].map((t=>t.classList.remove("active"))),gt.resetTaskContainer(),0===r.Z.taskList.length)return r.Z.taskContainer.classList.add("flex-1"),void(r.Z.taskContainer.innerHTML='\n                <div class="no-task-wrapper">\n                    <h2>Oops! Looks like there are no <span>Tasks</span></h2>\n                </div>\n            ');r.Z.taskContainer.classList.remove("flex-1"),"ALL_TASKS"===t&&this.renderAllTasks(),"TODAY_TASKS"===t&&this.renderTodayTasks(),"WEEK_TASKS"===t&&this.renderWeekTasks()}static renderAllTasks(){gt.renderProjectTitle("All tasks"),document.getElementById("list_all_tasks").classList.add("active"),r.Z.taskList.map((t=>{const e=gt.createTaskUiElement(t,"ALL_TASKS");r.Z.taskContainer.appendChild(e)}))}static renderTodayTasks(){gt.renderProjectTitle("Today tasks"),document.getElementById("list_today_tasks").classList.add("active");let t=!0;r.Z.taskList.map((e=>{const n=e.deadline.dueDate,a=(new Date).getDate();if(console.log(n.slice(-2)),parseInt(n.slice(-2))==a){const n=gt.createTaskUiElement(e,"TODAY_TASKS");r.Z.taskContainer.appendChild(n),t=!1}})),t&&(r.Z.taskContainer.classList.add("flex-1"),r.Z.taskContainer.innerHTML='\n                <div class="no-task-wrapper">\n                    <h2>Oops! Looks like there are no <span>Tasks</span></h2>\n                </div>')}static renderWeekTasks(){let t=!0;gt.renderProjectTitle("Week tasks"),document.getElementById("list_week_tasks").classList.add("active"),r.Z.taskList.map((e=>{const{dueDate:n}=e.deadline,a=new Date,i=function(t,e){o(2,arguments);var n=l(t),a=l(e),r=pt(n,a),i=Math.abs(ft(n,a));n.setDate(n.getDate()-r*i);var s=Number(pt(n,a)===-r),d=r*(i-s);return 0===d?0:d}(new Date(n),a);if(i<7){const n=gt.createTaskUiElement(e,"WEEK_TASKS");r.Z.taskContainer.appendChild(n),t=!1}})),t&&(r.Z.taskContainer.classList.add("flex-1"),r.Z.taskContainer.innerHTML='\n                <div class="no-task-wrapper">\n                    <h2>Oops! Looks like there are no <span>Tasks</span></h2>\n                </div>')}}const vt=document.getElementById("expand_nav");vt.addEventListener("click",(function(t){!1===kt?(document.querySelector(".projects-tab-container").style.display="flex",vt.innerHTML='<span class="material-symbols-outlined">\n                                    keyboard_double_arrow_down\n                                  </span>',kt=!0):(document.querySelector(".projects-tab-container").style.display="none",vt.innerHTML='<span class="material-symbols-outlined">\n        keyboard_double_arrow_up\n    </span>',kt=!1)}));let kt=!1;document.getElementById("login-btn").addEventListener("click",(()=>alert("Sorry! we don't support this feature right now."))),document.getElementById("sign-up-btn").addEventListener("click",(()=>alert("Sorry! we don't support this feature right now.")))},15:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(505),r=n(507),i=n(842);class o{static projectList=[];static openProjectModelBtn=document.getElementById("open-project-model-btn");static createProjectBtn=document.getElementById("add-project-btn");static cancelAddProjectBtn=document.getElementById("cancel-add-project-btn");static projectsTab=document.getElementById("projects-tab");static projectName=document.getElementById("project-title");static addProject=function(t,e){e.push(t),a.Z.updateStorage()};static createProject=function(){const t=o.projectName.value;if(!1!==o.checkProject(t)){const e=new o(t);o.addProject(e,o.projectList),i.Z.renderProjectsTab(),o.projectName.value=""}};static checkProject=function(t){let e=t;if(e=e.trim(),""!==e){for(const t of o.projectList)if(t.name===e)return i.Z.createProjectNameErrorMsg(e),!1;return!0}return!1};static deleteProject(t){!0===this.isProjectOpened(t)&&(i.Z.resetTaskContainer(),r.Z.taskContainer.innerHTML='<div class="default-task-container">\n            <h2>Let\'s start by making or opening a <span>Project</span>.</h2>\n            <img src="./home_svg.svg" alt="" width="300px">\n          </div>'),this.projectList=[...o.projectList.filter((e=>e.id!==t))],r.Z.taskList=[...r.Z.taskList.filter((e=>e.projectId!==t))],a.Z.updateStorage(),a.Z.updateTaskList(),i.Z.renderProjectsTab()}static openProject(t){[...document.querySelectorAll(".nav_link")].map((t=>t.classList.remove("active"))),[...document.querySelectorAll(".nav_link")].map((e=>{parseInt(e.getAttribute("data-projectId"))===t&&e.classList.add("active")})),o.projectList.map((e=>{e.isOpened=!1,e.id===t&&(i.Z.renderProjectTasks(e),e.isOpened=!0)}))}static removeTaskFromProjectList(t,e){o.projectList.map((n=>{n.id===t&&(n.tasks=n.tasks.filter((t=>t.taskId!==e)))}))}static getProject(t){let e={};return o.projectList.map((n=>{n.id===t&&(e={...n})})),e}static isProjectOpened(t){if(!0===this.getProject(t).isOpened)return!0}constructor(t){this.name=t,this.id=0===o.projectList.length?0:o.projectList[o.projectList.length-1].id+1,this.isOpened=!1,this.tasks=[]}addTask(t){this.tasks.unshift(t)}}},507:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(15),r=n(505),i=n(842);class o{static openTaskBModelBtn=document.getElementById("open-task-model-btn");static addTaskBtn=document.getElementById("add-task-btn");static cancelAddTaskBtn=document.getElementById("cancel-add-task-btn");static taskTitle=document.getElementById("task-title");static taskDesc=document.getElementById("task-desc");static taskDueDate=document.getElementById("task-due-date");static taskDueTime=document.getElementById("task-due-time");static taskPriority=document.getElementById("task-priority");static taskProject=document.getElementById("task-project");static taskContainer=document.getElementById("task-container");static taskList=[];static createTask(){const t=new o(o.taskTitle.value,o.taskDesc.value,o.taskDueDate.value,o.taskDueTime.value,o.taskPriority.value,parseInt(o.taskProject.value));o.addTask(t)}static addTask=function(t){a.Z.projectList[t.projectId].tasks.unshift(t),o.taskList.unshift(t),a.Z.openProject(t.projectId),r.Z.updateStorage(),r.Z.updateTaskList(),i.Z.closeAddTaskModel()};static deleteTask(t,e,n){a.Z.removeTaskFromProjectList(t,e),o.removeTaskFromTaskList(e),r.Z.updateStorage(),r.Z.updateTaskList();const s=a.Z.getProject(t);switch(n){case"ALL_TASKS":case"TODAY_TASKS":case"WEEK_TASKS":i.Z.renderTasks(n);break;default:i.Z.renderProjectTasks(s)}}static editTask(t,e,n){const s=document.getElementById("new-task-title").value,d=document.getElementById("new-task-desc").value,c={newDueTime:document.getElementById("new-task-due-time").value,newDueDate:document.getElementById("new-task-due-date").value},l=document.getElementById("new-task-priority").value;let u,m;switch(a.Z.projectList.map(((e,n)=>e.id===t?u=n:null)),a.Z.projectList[u].tasks.map(((t,n)=>t.taskId===e?m=n:null)),a.Z.projectList[u].tasks[m].editTaskDetails(s,d,c,l),o.taskList.map((t=>{t.taskId===e&&t.editTaskDetails(s,d,c,l)})),r.Z.updateStorage(),r.Z.updateTaskList(),n){case"ALL_TASKS":case"TODAY_TASKS":case"WEEK_TASKS":i.Z.renderTasks(n);break;default:i.Z.renderProjectTasks(a.Z.projectList[u])}i.Z.closeEditTaskModel()}static removeTaskFromTaskList(t){o.taskList=o.taskList.filter((e=>e.taskId!==t))}static completeTask(t,e,n){document.getElementById(`prj-${t}_tsk-${e}`).classList.add("task-completed"),setTimeout((()=>{this.deleteTask(t,e,n)}),2e3)}constructor(t,e,n,a,r,i){this.title=t,this.taskId=0===o.taskList.length?0:o.taskList[0].taskId+1,this.desc=e,this.deadline={dueTime:a,dueDate:n},this.priority=r,this.projectId=i}editTaskDetails(t,e,n,a){this.title=t,this.desc=e,this.deadline.dueTime=n.newDueTime,this.deadline.dueDate=n.newDueDate,this.priority=a}}}},t=>{t(t.s=15)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,